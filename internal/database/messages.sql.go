// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMessages = `-- name: GetMessages :many
SELECT id, name_from, name_to, message, created_at FROM Messages
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.NameFrom,
			&i.NameTo,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertBulkMessagesParams struct {
	NameFrom  string
	NameTo    string
	Message   string
	CreatedAt pgtype.Timestamp
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO Messages (name_from, name_to, message, created_at)
VALUES ($1, $2, $3, $4) RETURNING id, name_from, name_to, message, created_at
`

type InsertMessageParams struct {
	NameFrom  string
	NameTo    string
	Message   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage,
		arg.NameFrom,
		arg.NameTo,
		arg.Message,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.NameFrom,
		&i.NameTo,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
